@{
    ViewBag.Title = "Voracity";
}

<style type="text/css">
    .tile {
        background-color: grey;
        border-style: solid;
        border-width: 1px;
        float: left;
        height: 30px;
        text-align: center;
        width: 30px;
    }

    .tile_hover { background-color: lightblue; }

    .tile_current {
        background-color: goldenrod;
        border-style: solid;
        border-width: 1px;
        float: left;
        height: 30px;
        text-align: center;
        width: 30px;
    }

    .tile_flipped {
        background-color: darkolivegreen;
        border-style: solid;
        border-width: 1px;
        float: left;
        height: 30px;
        text-align: center;
        width: 30px;
    }
</style>

<script type="text/javascript">

    $(function() {

        var Tile = function(x, y, number) {
            var self = this;
            self.x = ko.observable(x);
            self.y = ko.observable(y);
            self.number = ko.observable(number);
            self.isCurrent = ko.observable(false);
            self.isFlipped = ko.observable(false);
            self.flip = function() {
                this.isFlipped(true);
            };
        };

        function ViewModel() {
            var self = this;

            self.tiles = ko.observableArray();

            self.score = ko.observable(0);

            self.startGame = function() {
                this.startOver();
                this.randomizeTiles();
                this.randomizeStart();
            };

            self.startOver = function() {
                self.tiles.removeAll();
            };

            self.randomizeTiles = function() {
                for (var x = 1; x <= 10; x++) {
                    for (var y = 1; y <= 10; y++) {
                        var randomNumber = 1 + Math.floor(Math.random() * 8);
                        var tile = new Tile(x, y, randomNumber);
                        self.tiles.push(tile);
                    }
                }
            };

            self.randomizeStart = function() {
                var randomIndex = Math.floor(Math.random() * 100);
                var t = self.tiles()[randomIndex];
                t.isCurrent(true);
                self.currentIndex = randomIndex;
            };

            self.move = function(tile) {
                var tileIndex = tile.y() + (tile.x() * 10 - 10) - 1;
                var dif = tileIndex - self.currentIndex;
                var isSurroundingTile =
                    dif === -1 * (10 - 1) || dif === -10 || dif === -1 * (10 + 1) ||
                        dif === -1 || dif === 1 ||
                        dif === 10 - 1 || dif === 10 || dif === 10 + 1;
                if (isSurroundingTile) {
                    var canFlip = true;
                    
                    for (var i = 1; i < tile.number(); i++) {
                        var flipIndex = tileIndex + (i * dif);
                        var flipTile = self.tiles()[flipIndex];
                        if (flipIndex < 0 || flipIndex >= 100 || flipTile.isFlipped() === true) canFlip = false;
                    }
                    var currentTile = self.tiles()[self.currentIndex];
                    if ((dif === -1 || dif === -1 * (10 - 1) || dif === 10 - 1) && currentTile.y() - tile.number() < 1) canFlip = false;
                    if ((dif === 1 || dif === -1 * (10 + 1) || dif === 10 + 1) && currentTile.y() + tile.number() > 10) canFlip = false;
                    if ((dif === -10 || dif === -1 * (10 - 1) || dif === 10 - 1) && currentTile.x() - tile.number() < 1) canFlip = false;
                    if ((dif === 10 || dif === -1 * (10 + 1) || dif === 10 + 1) && currentTile.x() + tile.number() > 10) canFlip = false;

                    if (canFlip) {
                        for (var i = 0; i < tile.number() - 1; i++) {
                            var flipIndex = tileIndex + (i * dif);
                            self.tiles()[flipIndex].flip();
                        }
                        self.tiles()[self.currentIndex].flip();
                        self.tiles()[self.currentIndex].isCurrent(false);
                        var newCurrentIndex = tileIndex + (dif * (tile.number() - 1));
                        self.tiles()[newCurrentIndex].isCurrent(true);
                        self.currentIndex = newCurrentIndex;
                        self.score(self.score() + tile.number());

                    }
                }
            };
        }

        ;
        var viewModel = new ViewModel();
        ko.applyBindings(viewModel);
    });

    $(document).ready(function() {
    });
</script>

<h2>Voracity</h2>
<button data-bind="click: startGame">Start Game</button>
<div id="voracityBoard" style='height: 320px; width: 320px;'>
    <span data-bind="foreach:tiles">
        <span data-bind="
            text: number, 
            attr: { class: isCurrent() ? 'tile_current' : isFlipped() ? 'tile_flipped' : 'tile' },
            click: $parent.move"></span>
    </span>
</div>
<span> Score: </span>
<span data-bind="text: score"></span>

<ul data-role="listview" data-inset="true">
    <li data-role="list-divider">Navigation</li>
    <li>@Html.ActionLink("Home", "Index", "Home")</li>
    <li>@Html.ActionLink("About", "About", "Home")</li>
</ul>